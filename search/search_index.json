{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Simple Cloud-Resolving E3SM Atmosphere Model (SCREAM) Some nice introductory text goes here! Maybe some figures, too. Who knows? The User Guide guide explains how to run SCREAM, both in its standalone configuration and within E3SM. The Developer Guide guide contains all the information needed to contribute to the development of SCREAM.","title":"Home"},{"location":"#simple-cloud-resolving-e3sm-atmosphere-model-scream","text":"Some nice introductory text goes here! Maybe some figures, too. Who knows? The User Guide guide explains how to run SCREAM, both in its standalone configuration and within E3SM. The Developer Guide guide contains all the information needed to contribute to the development of SCREAM.","title":"Simple Cloud-Resolving E3SM Atmosphere Model (SCREAM)"},{"location":"common/installation/","text":"Installation Prerequisites Setting Up Your Environment Configuring and Building Scream Running Tests","title":"Installation"},{"location":"common/installation/#installation","text":"","title":"Installation"},{"location":"common/installation/#prerequisites","text":"","title":"Prerequisites"},{"location":"common/installation/#setting-up-your-environment","text":"","title":"Setting Up Your Environment"},{"location":"common/installation/#configuring-and-building-scream","text":"","title":"Configuring and Building Scream"},{"location":"common/installation/#running-tests","text":"","title":"Running Tests"},{"location":"dev/","text":"SCREAM Developer Guide","title":"Overview"},{"location":"dev/#scream-developer-guide","text":"","title":"SCREAM Developer Guide"},{"location":"dev/data_structures/","text":"SCREAM data structures Here's a list of the most important data structures that are used in SCREAM. The Field class stack. The AbstractGrid interface. The AbstractRemapper interface. The FieldManager and GridsManager classes. The AtmosphereProcess interface. The IO classes. The SurfaceCoupling class. The AtmosphereDriver class. Talk also about where concrete instances of the abstract interfaces are. E.g., talk about HommeDynamics, P3Microphysics, etc, or the AtmosphereProcessGroup. Also talk about the very important PhysicsDynamicsRemapper. Finally, find the place to talk about how scream hooks up to E3SM. Part of it is the SurfaceCoupling, but there's more (all the content of mct_coupling folder). Maybe AD, SC, and mct hooks should be in their own page? In the rest of this page, give a bird-eye view of how the above classes are interconnected, like \"each atm proc receives input fields and compute output fields, stored in the field manager. each field is defined on a particular grid, and grid remapping is handled by the remappers. IO classes allow to read inputd (such as IC files), and write output (including restart files). The AD stores everything, and is in charge of init-ing everything, calling all routines in the right order during normal time-step, and cleanup at the end.\" Details on pre-post conditions, impl details, etc., for each class/data struct will be given in their own pages.","title":"SCREAM data structures"},{"location":"dev/data_structures/#scream-data-structures","text":"Here's a list of the most important data structures that are used in SCREAM. The Field class stack. The AbstractGrid interface. The AbstractRemapper interface. The FieldManager and GridsManager classes. The AtmosphereProcess interface. The IO classes. The SurfaceCoupling class. The AtmosphereDriver class. Talk also about where concrete instances of the abstract interfaces are. E.g., talk about HommeDynamics, P3Microphysics, etc, or the AtmosphereProcessGroup. Also talk about the very important PhysicsDynamicsRemapper. Finally, find the place to talk about how scream hooks up to E3SM. Part of it is the SurfaceCoupling, but there's more (all the content of mct_coupling folder). Maybe AD, SC, and mct hooks should be in their own page? In the rest of this page, give a bird-eye view of how the above classes are interconnected, like \"each atm proc receives input fields and compute output fields, stored in the field manager. each field is defined on a particular grid, and grid remapping is handled by the remappers. IO classes allow to read inputd (such as IC files), and write output (including restart files). The AD stores everything, and is in charge of init-ing everything, calling all routines in the right order during normal time-step, and cleanup at the end.\" Details on pre-post conditions, impl details, etc., for each class/data struct will be given in their own pages.","title":"SCREAM data structures"},{"location":"dev/perf_blocks/","text":"Performance Portability Blocks Here we can discuss EKAT, Kokkos, and all of the highly-technical non-scientific stuff that makes our heads hurt. Kokkos (View, device, parallel stuff) Briefly go over what kokkos is, and what we use from it Also, describe how some aspects are furtherly hidden by ekat (e.g., || reduce) Hierarchical parallelism This could be in the previous section, but it is the key block for scream perf, so maybe it deserves a small subsection? We can then explain how kokkos implements it, and how EKAT/SCREAM use kokkos for it (e.g., ekat::TeamUtils). Vectorization: Packs Describe vectorization issue, point to https://gmd.copernicus.org/articles/12/1423/2019/ for a study of packs and pack length on CPU performance. Explain how/why this does not compromise GPU perf.","title":"Performance portability structures"},{"location":"dev/perf_blocks/#performance-portability-blocks","text":"Here we can discuss EKAT, Kokkos, and all of the highly-technical non-scientific stuff that makes our heads hurt.","title":"Performance Portability Blocks"},{"location":"dev/perf_blocks/#kokkos-view-device-parallel-stuff","text":"Briefly go over what kokkos is, and what we use from it Also, describe how some aspects are furtherly hidden by ekat (e.g., || reduce)","title":"Kokkos (View, device, parallel stuff)"},{"location":"dev/perf_blocks/#hierarchical-parallelism","text":"This could be in the previous section, but it is the key block for scream perf, so maybe it deserves a small subsection? We can then explain how kokkos implements it, and how EKAT/SCREAM use kokkos for it (e.g., ekat::TeamUtils).","title":"Hierarchical parallelism"},{"location":"dev/perf_blocks/#vectorization-packs","text":"Describe vectorization issue, point to https://gmd.copernicus.org/articles/12/1423/2019/ for a study of packs and pack length on CPU performance. Explain how/why this does not compromise GPU perf.","title":"Vectorization: Packs"},{"location":"dev/processes/","text":"Atmospheric Processes Should we describe them in detail? Maybe just point out characteristic features. The AtmosphereProcess Class Microphysics (P3) Macrophysics/Turbulence (SHOC) Cloud fraction (CLD) This maybe can be skipped... Radiation (RRTMGP) Aerosols (SPA)","title":"Atmospheric Processes"},{"location":"dev/processes/#atmospheric-processes","text":"Should we describe them in detail? Maybe just point out characteristic features.","title":"Atmospheric Processes"},{"location":"dev/processes/#the-atmosphereprocess-class","text":"","title":"The AtmosphereProcess Class"},{"location":"dev/processes/#microphysics-p3","text":"","title":"Microphysics (P3)"},{"location":"dev/processes/#macrophysicsturbulence-shoc","text":"","title":"Macrophysics/Turbulence (SHOC)"},{"location":"dev/processes/#cloud-fraction-cld","text":"This maybe can be skipped...","title":"Cloud fraction (CLD)"},{"location":"dev/processes/#radiation-rrtmgp","text":"","title":"Radiation (RRTMGP)"},{"location":"dev/processes/#aerosols-spa","text":"","title":"Aerosols (SPA)"},{"location":"dev/style_guide/","text":"SCREAM C++ Style Guide Here's our style guide. Let the holy wars begin! Types Functions and Methods Variables","title":"Style Guide"},{"location":"dev/style_guide/#scream-c-style-guide","text":"Here's our style guide. Let the holy wars begin!","title":"SCREAM C++ Style Guide"},{"location":"dev/style_guide/#types","text":"","title":"Types"},{"location":"dev/style_guide/#functions-and-methods","text":"","title":"Functions and Methods"},{"location":"dev/style_guide/#variables","text":"","title":"Variables"},{"location":"dev/testing/","text":"Testing Here we describe our testing methodology: Unit tests Property (verification) tests Integration (validation?) tests It would be nice to have simple examples of all these.","title":"Testing"},{"location":"dev/testing/#testing","text":"Here we describe our testing methodology: Unit tests Property (verification) tests Integration (validation?) tests It would be nice to have simple examples of all these.","title":"Testing"},{"location":"dev/concepts/ad/","text":"Atmosphere Driver Describe what the AD is in charge of doing. Especially, describe the order of ops during initialization and run.","title":"Atmosphere Driver"},{"location":"dev/concepts/ad/#atmosphere-driver","text":"Describe what the AD is in charge of doing. Especially, describe the order of ops during initialization and run.","title":"Atmosphere Driver"},{"location":"dev/concepts/atm_proc/","text":"Field Describe what an atm process is. Pre/post conditions","title":"Field"},{"location":"dev/concepts/atm_proc/#field","text":"Describe what an atm process is. Pre/post conditions","title":"Field"},{"location":"dev/concepts/field/","text":"Field Describe what a Field is, and all the field stack classes.","title":"Field"},{"location":"dev/concepts/field/#field","text":"Describe what a Field is, and all the field stack classes.","title":"Field"},{"location":"dev/concepts/fm/","text":"Field Manager and Grids Manager Describe what the FM is. Should not take long, since it's mostly just a container that also allocates. Biggest task is the allocation of tracers and the handling of groups/subgroups. Then describe GridsManager. Even faster than FM. Should we move these two in field.md and grid.md files? I think so.","title":"Field Manager and Grids Manager"},{"location":"dev/concepts/fm/#field-manager-and-grids-manager","text":"Describe what the FM is. Should not take long, since it's mostly just a container that also allocates. Biggest task is the allocation of tracers and the handling of groups/subgroups. Then describe GridsManager. Even faster than FM. Should we move these two in field.md and grid.md files? I think so.","title":"Field Manager and Grids Manager"},{"location":"dev/concepts/grid/","text":"Grid Describe what a grid is","title":"Grid"},{"location":"dev/concepts/grid/#grid","text":"Describe what a grid is","title":"Grid"},{"location":"dev/concepts/io/","text":"IO Structures Describe Scream's IO: scorpio backend. Input vs Output. OutputManager. Answer this: what can you do, and what can't you do with IO classes?","title":"IO Structures"},{"location":"dev/concepts/io/#io-structures","text":"Describe Scream's IO: scorpio backend. Input vs Output. OutputManager. Answer this: what can you do, and what can't you do with IO classes?","title":"IO Structures"},{"location":"dev/concepts/remap/","text":"Remap Describe what a remapper does. Should be very fast for the generic class. Should we put this in grid.md? Maybe.","title":"Remap"},{"location":"dev/concepts/remap/#remap","text":"Describe what a remapper does. Should be very fast for the generic class. Should we put this in grid.md? Maybe.","title":"Remap"},{"location":"dev/concepts/sc/","text":"Surface Coupling Describe what it is, what it does, and how it is set up. This might be better suited in a section called \"coupling with E3SM\".","title":"Surface Coupling"},{"location":"dev/concepts/sc/#surface-coupling","text":"Describe what it is, what it does, and how it is set up. This might be better suited in a section called \"coupling with E3SM\".","title":"Surface Coupling"},{"location":"user/","text":"SCREAM User Guide","title":"Overview"},{"location":"user/#scream-user-guide","text":"","title":"SCREAM User Guide"}]}