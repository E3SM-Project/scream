include (ScreamUtils)

# This test requires CPRNC
include (BuildCprnc)
BuildCprnc()

# Needed for RRTMGP
find_library(NETCDF_C netcdf HINTS ${NetCDF_C_PATH}/lib)
# Get or create the dynamics lib
#                 HOMME_TARGET   NP PLEV QSIZE_D
CreateDynamicsLib("theta-l_kokkos"  4   72   35)

set (NEED_LIBS cld_fraction shoc p3 scream_rrtmgp rrtmgp ${NETCDF_C} ${dynLibName} scream_control scream_share physics_share yakl)

# We have 3 runs:
#  1) run for 2*N time steps starting from t=0 (baseline run)
#  2) run for N time steps starting from t=0 (init run)
#  3) run for N time steps re-starting from t=N*dt (restarted run)
# We can use the same namelist for all tests, using 3 different input yaml files

# Create a single executable for all the 3 runs
CreateUnitTestExec(model_restart model_restart.cpp "${NEED_LIBS};ekat_test_main;ekat_test_session;ekat")

# Create the baseline (run all 6 timsteps in a single run)
CreateUnitTestFromExec(model_baseline model_restart
                       EXE_ARGS "--ekat-test-params ifile=input_baseline.yaml"
                       PROPERTIES FIXTURES_SETUP baseline_run)

# Start a simulation, but only run half of the time steps
CreateUnitTestFromExec(model_initial model_restart
                       EXE_ARGS "--ekat-test-params ifile=input_initial.yaml"
                       PROPERTIES FIXTURES_SETUP initial_run)

# Restart the simulation, and run the second half of the time steps
CreateUnitTestFromExec(model_restart model_restart
                       EXE_ARGS "--ekat-test-params ifile=input_restarted.yaml"
                       PROPERTIES FIXTURES_REQUIRED initial_run FIXTURES_SETUP restarted_run)

# Finally, compare the nc outputs generated by the basline and restarted runs
# IMPORTANT: make sure these file names match what baseline/restarted runs produce
set (SRC_FILE model_output_baseline.INSTANT.Steps_x2.2021-10-12.121000.nc)
set (TGT_FILE model_output.INSTANT.Steps_x2.2021-10-12.121000.nc)

add_test (NAME model_restart_check
          COMMAND cmake -P ${CMAKE_BINARY_DIR}/bin/CprncTest.cmake ${SRC_FILE} ${TGT_FILE}
          WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
set_tests_properties (model_restart_check PROPERTIES
                      RESOURCE_GROUPS "devices:1"
                      FIXTURES_REQUIRED "baseline_run;restarted_run")

# Set AD configurable options
set (ATM_TIME_STEP 300)

# Configure yaml input file to run directory
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/input_baseline.yaml
               ${CMAKE_CURRENT_BINARY_DIR}/input_baseline.yaml)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/input_initial.yaml
               ${CMAKE_CURRENT_BINARY_DIR}/input_initial.yaml)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/input_restarted.yaml
               ${CMAKE_CURRENT_BINARY_DIR}/input_restarted.yaml)

# The two yaml files that control the output streams (for the baseline and restart runs)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/model_output.yaml
               ${CMAKE_CURRENT_BINARY_DIR}/model_output.yaml COPYONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/model_restart_output.yaml
               ${CMAKE_CURRENT_BINARY_DIR}/model_restart_output.yaml COPYONLY)

# Set homme's test options, so that we can configure the namelist correctly
# Discretization/algorithm settings
set (HOMME_TEST_NE 2)
set (HOMME_TEST_LIM 9)
set (HOMME_TEST_REMAP_FACTOR 1)
set (HOMME_TEST_TRACERS_FACTOR 1)
set (HOMME_TEST_TIME_STEP 300)
set (HOMME_THETA_FORM 1)
set (HOMME_TTYPE 10)
set (HOMME_SE_FTYPE 0)

# Hyperviscosity settings
set (HOMME_TEST_HVSCALING 0)
set (HOMME_TEST_HVS 1)
set (HOMME_TEST_HVS_TOM 0)

set (HOMME_TEST_NU 7e15)
set (HOMME_TEST_NUDIV 1e15)
set (HOMME_TEST_NUTOP 2.5e5)

# Testcase settings
set (HOMME_TEST_MOISTURE notdry)
set (HOMME_THETA_HY_MODE false)

# Vert coord settings
set (HOMME_TEST_VCOORD_INT_FILE acme-72i.ascii)
set (HOMME_TEST_VCOORD_MID_FILE acme-72m.ascii)

# Configure the namelist into the test directory
configure_file(${SCREAM_SRC_DIR}/dynamics/homme/tests/theta.nl
               ${CMAKE_CURRENT_BINARY_DIR}/namelist.nl)

# Copy initial conditions files
GetInputFile(init/homme_physics_ne2np4.nc
  ${CMAKE_CURRENT_BINARY_DIR}/homme_physics_ne2np4.nc)

# Create vcoord directory
file (MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/vcoord)

# Copy vcoord files to build dir
configure_file(${HOMME_SOURCE_DIR}/test/vcoord/acme-72i.ascii
               ${CMAKE_CURRENT_BINARY_DIR}/vcoord COPYONLY)
configure_file(${HOMME_SOURCE_DIR}/test/vcoord/acme-72m.ascii
               ${CMAKE_CURRENT_BINARY_DIR}/vcoord COPYONLY)

# P3 data files
GetInputFile(tables/p3_lookup_table_1.dat-v4.1.1
  ${CMAKE_CURRENT_BINARY_DIR}/data/p3_lookup_table_1.dat-v4.1.1)
GetInputFile(tables/p3_lookup_table_2.dat-v4.1.1
  ${CMAKE_CURRENT_BINARY_DIR}/data/p3_lookup_table_2.dat-v4.1.1)

# RRTMGP data files
set(RRTMGP_EXTERNAL_DIR ${SCREAM_BASE_DIR}/../eam/src/physics/rrtmgp/external)
GetInputFile(init/rrtmgp-data-sw-g224-2018-12-04.nc
  ${CMAKE_CURRENT_BINARY_DIR}/data)
GetInputFile(init/rrtmgp-data-lw-g256-2018-12-04.nc
  ${CMAKE_CURRENT_BINARY_DIR}/data)
GetInputFile(init/rrtmgp-cloud-optics-coeffs-sw.nc
  ${CMAKE_CURRENT_BINARY_DIR}/data)
GetInputFile(init/rrtmgp-cloud-optics-coeffs-lw.nc
  ${CMAKE_CURRENT_BINARY_DIR}/data)
