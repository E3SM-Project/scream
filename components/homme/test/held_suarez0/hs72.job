#!/bin/tcsh -f 
#
#  Held-Suarez job scrip for E3SMv1 72L configuration
#
#  directories
#        $HOMME        homme root directory 
#        $wdir         run and data output directory
#
#  files 
#       explicit72.nl.sed   namelist template used by this script
#                           to construct "input.nl" read by HOMME
#
#
#
#SBATCH --job-name HS72
#SBATCH -p acme-medium
#SBATCH --account=condo
#SBATCH -N 30
#SBATCH --time=2:00:00
#SBATCH -x b589


set nlev=72
set ndays = 1200    # 1600
set nmax =  1       # no. of timesteps.  ignored, unless ndays=0
set rfreq = 30000    # no. of days, or n. of timesteps if ndays=0

# 0 = normal, 1=restart
set runtype = 0

set ne = 30
set NPTS = 4
set qsize = 0         # number of tracers
set topo = ''
set toponame = ''
set nu=5.5e-8


if ( $ne == 8 ) then
   # 3.75 degree     
   set tstep = 900
endif
if ( $ne == 15 ) then
    set tstep = 600
 endif
 if ( $ne == 30 ) then
    # 1 degree    H model, 20 nodes, 30min for 1600days
    set tstep = 300   # H model
    #set topo = '/home/ccsm-data/inputdata/atm/cam/topo/USGS-gtopo30_ne30np4_16xdel2-PFC-consistentSGH.nc'
    set topo = '/lcrc/group/acme/ac.mtaylor/topodata/ne30/USGS-gtopo30_ne30np4_fx2t.nc'
    set toponame = fx2t
 endif
 if ( $ne == 120 ) then
    # 0.25 degree 
    set tstep = 40        # dynamics timestep   
    set topo = '/lcrc/group/acme/taylorm/topodata/ne120/USGS-gtopo30_ne120np4_384xdel2_latlon.nc'
    set toponame = 384xdel2
 endif


 # number of hours between calls to prim_printstate
 set sfreq = 6
 #set sfreq = 1
 @ sfreq *= 3600
 @ sfreq /= $tstep

 if ( $ndays == 0 ) then
   set sfreq = $nmax
 endif


 set HOMME = ~/codes/acme/components/homme
 set wdir = ~/scratch1/preqx

 set MACH = $HOMME/cmake/machineFiles/anvil.cmake
 set input = $HOMME/test/held_suarez0
 set bld = $wdir/bld72
 #set exe = preqx
 set exe = theta-l

 set name = hs72${toponame}-$exe-ne${ne}-nu${nu}
 echo $name

 mkdir -p $bld
 cd $bld
#  rm $bld/CMakeCache.txt    # remove this file to force re-configure
 if (! -f CMakeCache.txt) then
    echo "running CMAKE to configure the model"

    cmake -C $MACH -DQSIZE_D=$qsize -DPREQX_PLEV=$nlev -DPREQX_NP=4  \
    -DBUILD_HOMME_SWDGX=FALSE                     \
    -DBUILD_HOMME_SWEQX=FALSE                     \
    -DBUILD_HOMME_PRIMDGX=FALSE                   \
    -DPREQX_USE_ENERGY=TRUE  $HOMME
    if ($status) exit
    make -j4 clean
    exit
 endif
 #if (! -f $bld/src/$exe/$exe ) then
    make -j4 $exe
    if ($status) exit
 #endif

 # setup the work directory
 mkdir $wdir/vcoord
 cp -f $HOMME/test/vcoord/*.ascii $wdir/vcoord


 set wdir = $wdir/$name
 mkdir $wdir
 mkdir $wdir/movies
# mkdir $wdir/restart
 ln -fs $wdir/../restart $wdir    # good NE30L72 restart



 set rname = R0001
 if ( 1 == $runtype ) then
    cd $wdir/restart
    set rname = `ls -t R*[0-9] | head -1 `
    echo $rname
 endif




 if ( 0 == $ndays ) then
    set RUNLEN = "nmax = $nmax"
    echo RUNNING $nmax timesteps
 else
    set RUNLEN = "ndays = $ndays"
    echo RUNNING $ndays DAYS
 endif

 cd $input
 rm -f $wdir/input.nl
 sed s/NE/$ne/ explicit${nlev}.nl.sed | sed s/TSTEP/$tstep/ | sed s/SFREQ/$sfreq/ |\
 sed s/R0001/$rname/ | sed s/RUNTYPE/$runtype/ |\
 sed s/NU1/$nu/ |\
sed s:infilenames.\*:"infilenames = '$topo'": |\
sed s/\ndays.\*/"$RUNLEN"/ |\
sed s/restartfreq.\*/"restartfreq = $rfreq"/ |\
sed s/\qsize.\*/"qsize = $qsize"/ > $wdir/input.nl


cd $wdir


cat  $wdir/input.nl


############################################################
# run the code
############################################################
date
set echo
srun -K -c 1 -N $SLURM_NNODES   $bld/src/$exe/$exe < $wdir/input.nl 
date

# save timing data
mv HommeTime HommeTime.$$

############################################################
# extract average cost per timestep, for benchmark results
############################################################
unset echo
# extract prim_run time 
if ( $ndays > 0 ) then
   # user specified days, not nmax
   @ nmax = $ndays * 24 * 3600  / $tstep
endif 

set rtime = `head -100 HommeTime.$$ | grep prim_run | head -1 | awk '{print $7}' - `
#set time_per_timestep = `echo "scale=8;$rtime / $nmax" | bc`
set time_per_timestep = `python -c "print($rtime / $nmax)" `
echo "time for $nmax timesteps = $rtime seconds"
echo "average time (seconds) per timestep:  $time_per_timestep"

# compute SYPD:  
# number of timesteps per year:  360*24*3600/tstep
# timesteps per second:           (1/$time_per_timestep)
# years per second:     :  (1/$time_per_timestep) /  (360*24*3600/tstep)
#                          $tstep / ( $time_per_timestep 360*24*3600 )
# cost per day:            $tstep / ( $time_per_timestep 360 )
#set SYPD = `echo "scale=8; $tstep / ( $time_per_timestep * 360 )" | bc `
set SYPD = `python -c "print($tstep / ( $time_per_timestep * 360 ))" `
echo "NODES=$SLURM_NNODES SYPD = $SYPD"

# run NCL:
ncl ~/codes/acme/components/homme/test/held_suarez0/mapave.ncl
echo done
