#!/usr/bin/env python3

"""
Namelist creator for E3SM's SCREAM component

This script is mostly for processing the scream_input.yaml file.

That file supports some special syntax in addition to basic YAML:
'${VAR}' will be used to refer to env variables in the CIME case

'<switch_val : key1 => val1 : key2 => val2 : elseval>' will be used to express conditional
statements. If switch_val matches key1, then the expression evaluates to val1; if switch_val
matches key2, then the expression evaluates to val2; if it matches neither, then
the expression evaluates to elseval. The elseval component of this expression is optional.

Example, if you wanted tstep to depend on atm grid resolution:

  tstep: "<${ATM_GRID} : ne4np4 => 300 : 30>"

This would give all ne4 cases a timestep of 300, otherwise it would be 30.

You could specify multiple grid->timestep relationships this way:

  tstep: "<${ATM_GRID} : ne4np4 => 300 : ne30np4 => 100 : 30>"
"""

import os, sys, re
from collections import OrderedDict

_CIMEROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..","..","..","cime")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

# Add path to scream libs
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), "scripts"))

# Cime imports
from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd_no_fail, safe_copy, SharedArea
from CIME.buildnml import create_namelist_infile, parse_input

# SCREAM imports
from utils import ensure_yaml
ensure_yaml()
import yaml

logger = logging.getLogger(__name__)

CIME_VAR_RE = re.compile(r'[$][{](\w+)[}]')
SWITCH_RE   = re.compile(r'<\s*(\w+)\s*:')

###############################################################################
def do_cime_vars(entry, case):
###############################################################################
    m = CIME_VAR_RE.search(entry)
    while m:
        cime_var = m.groups()[0]
        value = case.get_value(cime_var)
        expect(value is not None, "Cannot resolve yaml entry {}, CIME has no value for {}".format(entry, cime_var))
        entry = entry.replace("${{{}}}".format(cime_var), value)
        m = CIME_VAR_RE.search(entry)

    return entry

###############################################################################
def do_switches(entry, case):
###############################################################################
    m = SWITCH_RE.search(entry)
    while m:
        begin_switch_idx, end_cond_idx = m.span()
        value = m.groups()[0]
        opens = 1
        idx = end_cond_idx
        segments = [""]
        for idx in range(end_cond_idx, len(entry)):
            if entry[idx] == "<":
                opens += 1
            elif entry[idx] == ">" and entry[idx-1] != "=":
                opens -= 1
                if opens == 0:
                    break

            if entry[idx] == ":" and opens == 1:
                segments.append("")
            else:
                segments[-1] += entry[idx]

        expect(idx < len(entry), "Switch statement parse error in string '{}'".format(entry))
        end_switch_idx = idx + 1
        best_val = None
        for segment in segments:
            components = segment.split("=>", 1)
            if (len(components) == 1 or '<' in components[0]):
                if best_val is None:
                    best_val = do_switches(segment, case).strip()
            else:
                compare = re.compile(components[0].strip())
                if compare.match(value):
                    best_val = do_switches(components[-1], case).strip()
                    break

        expect(best_val is not None, "Couldn't resolve switch statement for '{}', no matches".format(entry))

        entry = entry[0:begin_switch_idx] + best_val + entry[end_switch_idx:]
        m = SWITCH_RE.search(entry)

    return entry

###############################################################################
def refine_type(entry):
###############################################################################
    try:
        v = int(entry)
        return v
    except ValueError:
        pass

    try:
        v = float(entry)
        return v
    except ValueError:
        return entry

###############################################################################
def process_leaves(yaml_entry, case):
###############################################################################
    modified = False
    for k, v in yaml_entry.items():
        if isinstance(v, str):
            orig_str = v
            v = do_cime_vars(v, case)
            v = do_switches(v, case)
            if v != orig_str:
                v = refine_type(v)
                modified = True
                yaml_entry[k] = v

        elif isinstance(v, dict):
            modified |= process_leaves(v, case)

    return modified

###############################################################################
def load_comments(filepath):
###############################################################################
    """
    Loading and dumping YAML files does not preserve the whitespace or comments
    from the original. Since SCREAM users will be interacting with the scream_input.yaml,
    we really want to keep these comments. This function will parse the text of
    a YAML file and store the comments and whitespace in a simple list of 3-ples
    [(do_insert, line idx, text)] with the idea that this data can be applied
    to a freshly generated YAML file via the apply_comments function.
    """
    with open(filepath, "r") as fd:
        lines = fd.readlines()

    result = []
    for idx, line in enumerate(lines):
        sline = line.strip()

        if sline.startswith("%YAML"):
            result.append((True, idx, line))
        elif sline in ["---", "..."]:
            result.append((True, idx, line))
        elif sline == "":
            result.append((True, idx, line))
        elif "#" in line:
            try:
                before, after = line.split("#")
            except ValueError:
                expect(False, "Bad line, too many #: {}".format(line))
            before_nows = before.strip()
            if before_nows == "":
                result.append((True, idx, line))
            else:
                result.append((False, idx, after))

    return result

###############################################################################
def apply_comments(filepath, comments):
###############################################################################
    """
    Apply the comments from load_comments to a freshly generated YAML file.
    """
    with open(filepath, "r") as fd:
        lines = fd.readlines()

    for is_insert, idx, contents in comments:
        if is_insert:
            lines.insert(idx, contents)
        else:
            lines[idx] = "{} # {}".format(lines[idx].rstrip(), contents)

    with open(filepath, "w") as fd:
        fd.writelines(lines)

###############################################################################
def ordered_load(item, Loader=yaml.SafeLoader, object_pairs_hook=OrderedDict):
###############################################################################
    """
    Copied from: https://stackoverflow.com/a/21912744
    Added ability to pass filename
    """
    class OrderedLoader(Loader):
        pass
    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return object_pairs_hook(loader.construct_pairs(node))
    OrderedLoader.add_constructor(
        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
        construct_mapping)

    if isinstance(item, str) and item.endswith(".yaml"):
        # Item is a filepath
        return yaml.load(open(item, "r"), OrderedLoader)
    else:
        return yaml.load(item, OrderedLoader)

###############################################################################
def ordered_dump(data, item, Dumper=yaml.SafeDumper, **kwds):
###############################################################################
    """
    Copied from: https://stackoverflow.com/a/21912744
    Added ability to pass filename
    """
    class OrderedDumper(Dumper):
        pass
    def _dict_representer(dumper, data):
        return dumper.represent_mapping(
            yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
            data.items())
    OrderedDumper.add_representer(OrderedDict, _dict_representer)

    if isinstance(item, str) and item.endswith(".yaml"):
        # Item is a filepath
        with open(item, "w") as fd:
            return yaml.dump(data, fd, OrderedDumper, **kwds)
    else:
        return yaml.dump(data, item, OrderedDumper, **kwds)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    expect(compname == "scream", compname)

    # Copy data inputs to a place where they are convenient to find the run
    # area.
    rundir   = case.get_value("RUNDIR")
    target   = os.path.join(rundir, "data")
    src      = os.path.join(case.get_value("SRCROOT"), "components/scream/data")
    yaml_tgt = os.path.join(target, "scream_input.yaml")

    # Copy scream/data to rundir/data
    with SharedArea():
        if not os.path.isdir(target):
            os.mkdir(target)

        for item in os.listdir(src):
            # Do not overwrite existing files because that would remove any
            # local mods made by the user.
            if not os.path.exists(os.path.join(target, item)):
                safe_copy(os.path.join(src, item), target)

    # Load scream inputs from yaml and store original-file comments
    comments = load_comments(yaml_tgt)
    scream_input = ordered_load(yaml_tgt)

    modified = process_leaves(scream_input, case)

    # If we have to re-dump the YAML file due to CIME case updates,
    # we need to also restore the original comments.
    if modified:
        ordered_dump(scream_input, yaml_tgt)
        apply_comments(yaml_tgt, comments)

    # Create homme namelists from scream inputs
    homme_nl_path = os.path.join(rundir, scream_input["Atmosphere Driver"]["Grids Manager"]["Dynamics Driven"]["Dynamics Namelist File Name"])
    with open(homme_nl_path, "w") as fd:
        for outer, inner in scream_input["HOMME"].items():
            fd.write("&{}\n".format(outer))
            for k, v in inner.items():
                if type(v) is str:
                    fd.write("{} = '{}'\n".format(k, v))
                elif type(v) is bool:
                    fd.write("{} = {}\n".format(k, str(v).lower()))
                else:
                    fd.write("{} = {}\n".format(k, v))

            fd.write("/\n")

###############################################################################
def _main_func():
###############################################################################
    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "scream")

if __name__ == "__main__":
    _main_func()
