#!/usr/bin/env python3

"""
Drive ctest testing of scream for a complete set of tests. This will be our
gold standard to determine if the code is working or not on the current platform.

Run from $scream-repo/components/scream
"""

from utils import check_minimum_python_version
check_minimum_python_version(3, 4)

import argparse, sys, os, pathlib

from test_all_scream import TestAllScream

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <ARGS> [--verbose]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run all tests on current machine \033[0m
    > cd $scream_repo/components/scream
    > ./scripts/test-all-scream $(which mpicxx) -m melvin

    \033[1;32m# Run all tests on current machine with custom flags\033[0m
    > cd $scream_repo/components/scream
    > ./scripts/test-all-scream $(which mpicxx) -m melvin -c "CMAKE_CXX_FLAGS=-O1 -O2"
""".format(pathlib.Path(args[0]).name),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("cxx", help="C++ compiler")

    parser.add_argument("-k", "--kokkos", help="Kokkos installation to use. Default is to build our own.")

    parser.add_argument("-s", "--submit", action="store_true", help="Submit results to dashboad, requires machine")

    parser.add_argument("-p", "--parallel", action="store_true",
                        help="Launch the different build types stacks in parallel")

    parser.add_argument("-f", "--fast-fail", action="store_true",
                        help="Stop testing when the first failure is detected")

    parser.add_argument("-b", "--baseline-ref", default=None, # default will be computed later
        help="What commit to use to generate baselines. Default is merge-base of current commit and origin/master (or HEAD if --keep-tree)")

    parser.add_argument("--baseline-dir", default=None,
        help="Use baselines from the given directory, skip baseline creation.")

    parser.add_argument("-m", "--machine",
        help="Provide machine name. This is required for internal kokkos builds and dashboard submission")

    parser.add_argument("--no-tests", action="store_true", help="Only build baselines, skip testing phase")

    parser.add_argument("--keep-tree", action="store_true",
        help="Allow to keep the current work tree when testing against HEAD (only valid with `-b HEAD`)")

    parser.add_argument("-c", "--custom-cmake-opts", action="append", default=[],
        help="Extra custom options to pass to cmake. Can use multiple times for multiple cmake options. The -D is added for you")

    parser.add_argument("-e", "--custom-env-vars", action="append", default=[],
        help="Extra custom environment variables to be used. These will override (if applicable) whatever was found in machine_specs. Each -e flag supports a single env var, so to pass multiple env var, do -e ""KEY1=VALUE1"" -e ""KEY2=VALUE2"" ")

    parser.add_argument("-t", "--test", dest="tests", action="append", default=[],
        help="Only run specific test configurations, choices='dbg' (debug), 'sp' (single-prec), 'fpe' (floating-point exceptions)")

    parser.add_argument("-i", "--integration-test", action="store_true", default="JENKINS_HOME" in os.environ,
                        help="Merge origin/master into this branch before testing.")

    parser.add_argument("-r", "--root-dir",
                        help="The root directory of the scream src you want to test. "
                        "Default will be the scream src containing this script.")

    parser.add_argument("-d", "--dry-run", action="store_true",
                        help="Do a dry run, commands will be printed but not executed")

    parser.add_argument("--make-parallel-level", action="store", type=int, default=0,
        help="Max number of jobs to be created during compilation. If not provided, use default for given machine.")

    parser.add_argument("--ctest-parallel-level", action="store", type=int, default=0,
        help="Force to use this value for CTEST_PARALLEL_LEVEL. If not provided, use default for given machine.")

    return parser.parse_args(args[1:])

###############################################################################
def _main_func(description):
###############################################################################
    tas = TestAllScream(**vars(parse_command_line(sys.argv, description)))

    success = tas.test_all_scream()

    print("OVERALL STATUS: {}".format("PASS" if success else "FAIL"))

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
