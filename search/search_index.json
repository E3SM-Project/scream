{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The C++ E3SM Atmosphere Model (EAMxx)","text":"<p>Some nice introductory text goes here! Maybe some figures, too. Who knows?</p> <ul> <li>The User Guide guide explains how to run EAMxx, both in   its standalone configuration and within E3SM.</li> <li>The Developer Guide guide contains all the information needed   to contribute to the development of EAMxx.</li> </ul>"},{"location":"common/eamxx_params/","title":"EAMxx runtime configurable parameters","text":""},{"location":"common/eamxx_params/#atmosphere-processes-parameters","title":"Atmosphere Processes Parameters","text":""},{"location":"common/eamxx_params/#sc_import","title":"sc_import","text":"<ul> <li>sc_import::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>sc_import::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_import::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_import::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>sc_import::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>sc_import::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#sc_export","title":"sc_export","text":"<ul> <li>sc_export::prescribed_constants::fields:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::prescribed_constants::values:  </p> <ul> <li>description: MISSING </li> <li>type: array(real)  </li> </ul> </li> <li> <p>sc_export::prescribed_from_file::fields:  </p> <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>sc_export::prescribed_from_file::files:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::prescribed_from_file::fields_alt_name:  </p> <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::number_of_subcycles:  </p> <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>sc_export::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_export::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_export::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>sc_export::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>sc_export::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#homme","title":"homme","text":"<ul> <li>homme::Moisture:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>homme::BfbHash:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>homme::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>homme::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>homme::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>homme::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>homme::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>homme::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#p3","title":"p3","text":"<ul> <li>p3::do_prescribed_ccn:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::do_predict_nc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::tables:  <ul> <li>description: MISSING </li> <li>type: array(file)  </li> </ul> </li> <li>p3::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>p3::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>p3::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>p3::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>p3::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>p3::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#shoc","title":"shoc","text":"<ul> <li>shoc::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>shoc::check_flux_state_consistency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>shoc::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>shoc::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>shoc::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>shoc::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>shoc::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>shoc::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#cldfraction","title":"cldFraction","text":"<ul> <li>cldFraction::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>cldFraction::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cldFraction::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cldFraction::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>cldFraction::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>cldFraction::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#testonly","title":"testOnly","text":"<ul> <li>testOnly::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>testOnly::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>testOnly::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>testOnly::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>testOnly::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>testOnly::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#spa","title":"spa","text":"<ul> <li>spa::spa_remap_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>spa::spa_data_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>spa::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>spa::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>spa::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>spa::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>spa::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>spa::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#rrtmgp","title":"rrtmgp","text":"<ul> <li>rrtmgp::rrtmgp_coefficients_file_sw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_coefficients_file_lw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_cloud_optics_file_sw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_cloud_optics_file_lw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::column_chunk_size:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::active_gases:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::ch4vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::co2vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::n2ovmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::f11vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::f12vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::n2vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::covmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_year:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_eccentricity:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_obliquity:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_mvelp:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::rad_frequency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::do_aerosol_rad:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>rrtmgp::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>rrtmgp::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>rrtmgp::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#mac_aero_mic","title":"mac_aero_mic","text":"<ul> <li>mac_aero_mic::atm_procs_list:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::number_of_subcycles:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::Type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::schedule_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: Sequential  </li> </ul> </li> <li>mac_aero_mic::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mac_aero_mic::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mac_aero_mic::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mac_aero_mic::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mac_aero_mic::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#cosp","title":"cosp","text":"<ul> <li>cosp::cosp_subcolumns:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>cosp::cosp_frequency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>cosp::cosp_frequency_units:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: steps,hours  </li> </ul> </li> <li>cosp::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>cosp::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cosp::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cosp::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>cosp::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>cosp::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#physics","title":"physics","text":"<ul> <li>physics::atm_procs_list:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>physics::Type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>physics::schedule_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: Sequential  </li> </ul> </li> <li>physics::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>physics::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>physics::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>physics::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>physics::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>physics::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#initial-conditions-parameters","title":"Initial Conditions Parameters","text":"<ul> <li>initial_conditions::Filename:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>initial_conditions::topography_filename:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>initial_conditions::phis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::restart_casename:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_evap:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::precip_liq_surf_mass:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::precip_ice_surf_mass:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::cldfrac_liq:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sgs_buoy_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::eddy_diff_mom:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::T_prev_micro_step:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qv_prev_micro_step:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qm:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::bm:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::ni_activated:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nc_nuceat_tend:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::tke:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dir_vis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dir_nir:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dif_vis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dif_nir:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_sens_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_lw_flux_up:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_mom_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qi:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::ni:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::o3_volume_mix_ratio:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#atmosphere-driver-parameters","title":"Atmosphere Driver Parameters","text":"<ul> <li>driver_options::atmosphere_dag_verbosity_level:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::atm_log_level:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: trace,debug,info,warn,error  </li> </ul> </li> <li>driver_options::output_to_screen:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>driver_options::mass_column_conservation_error_tolerance:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::energy_column_conservation_error_tolerance:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::column_conservation_checks_fail_handling_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::check_all_computed_fields_for_nans:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#scorpio-parameters","title":"Scorpio Parameters","text":"<ul> <li>Scorpio::output_yaml_files:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>Scorpio::model_restart::filename_prefix:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#homme-namelist","title":"Homme namelist","text":"<ul> <li>ctl_nl::cubed_sphere_map:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::disable_diagnostics:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::dt_remap_factor:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>constraints: ge 1  </li> </ul> </li> <li>ctl_nl::dt_tracer_factor:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>constraints: ge 1  </li> </ul> </li> <li>ctl_nl::hv_ref_profiles:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_order:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_scaling:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle_tom:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle_q:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::nu:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::nu_top:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::pgrad_correction:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ftype:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: 0,2  </li> </ul> </li> <li>ctl_nl::se_geometry:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_limiter_option:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne_x:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne_y:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_nsplit:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_partmethod:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_topology:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_tstep:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::statefreq:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::theta_advect_form:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::theta_hydrostatic_mode:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::tstep_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::vert_remap_q_alg:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::transport_alg:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::vtheta_thresh:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>ctl_nl::mesh_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> </ul>"},{"location":"common/installation/","title":"Installation","text":""},{"location":"common/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"common/installation/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"common/installation/#configuring-and-building-scream","title":"Configuring and Building Scream","text":""},{"location":"common/installation/#running-tests","title":"Running Tests","text":""},{"location":"dev/","title":"SCREAM Developer Guide","text":""},{"location":"dev/ci_nightly/","title":"Continuous Integration and Nightly Testing","text":"<ul> <li>Autotester quick overview</li> <li>Nightly overview, CDash</li> </ul>"},{"location":"dev/cime_testing/","title":"Full Model Testing","text":"<p>Quickly review CIME test infrastructure and how EAMxx uses it</p> <ul> <li>test types, specifiers (<code>_LnX</code>,<code>_D</code>,<code>_PMxN</code>,..), grids, compsets, test-mods</li> <li>available grids/compsets for EAMxx, and where to find them</li> <li>how to add atmchange in <code>shell_commands</code> test mods</li> </ul>"},{"location":"dev/field/","title":"Fields","text":""},{"location":"dev/field/#field","title":"Field","text":"<p>In EAMxx, a <code>Field</code> is a data structure holding two things: pointers to the data and pointers to metadata. Both the data and metadata are stored in <code>std::shared_ptr</code> instances, to ensure consistency across all copies of the field. This allows for fast shallow copy semantic for this class.</p> <p>The data is stored on both CPU and device memory (these may be the same, depending on the Kokkos backend). In EAMxx, we always assume and guarantee that the device data is up to date. That implies that the data be explicitly synced to host before using it on host, and explicitly synced to device after host manipulation, in order to ensure correctness. In order to access the data, users must use the <code>get_view</code> method, which takes two template arguments: the data type, and an enum specifying whether CPU or device data is needed. The data type is used to reinterpret the generic pointer stored inside to a view of the correct scalar type and layout. It is a possibly const-qualified type, and if the field was marked as \"read-only\", the method ensures that the provided data type is const. A read-only field can be created via the <code>getConst</code> method, which returns an identical copy of the field, but marked as read-only. The enum specifying host or device data is optional, with device being the default.</p> <p>The metadata is a collection of information on the field, such as name, layout, units, allocation size, and more. Part of the metadata is immutable after creation (e.g., name, units, or layout), while some metadata can be partially or completely modified. The metadata is contained in the <code>FieldHeader</code> data structure, which contains four parts:</p> <ul> <li><code>FieldIdentifier</code>: stores the field's name, layout, units, data type, and name of the grid where it's defined.   These information are condensed in a single string, that can be used to uniquely identify a field,   allowing to distinguish between different version of the same field. The layout is stored in the <code>FieldLayout</code>   data structure, which includes:<ul> <li>the field tags: stored as a <code>std::vector&lt;FieldTag&gt;</code>, they give context to the field's extents.</li> <li>the field dims: stored both as a <code>std::vector&lt;int&gt;</code>, as well as a 1d <code>Kokkos::View</code>.</li> </ul> </li> <li><code>FieldTracking</code>: stores information on the usage of the field, as well as its possible connections to other   fields. In particular, the tracked items are:<ul> <li>the field time stamp: the time stamp when the field was last updated.</li> <li>the field accumulation start time: used for fields that are accumulated over several time steps   (or time step subcycles). For instance, it allows to reconstruct fluxes from raw accumulations.</li> <li>the providers/customers: lists of atmosphere processes (see below) that respectively require/compute   the field in their calculations.</li> <li>the field groups: a list of field groups that this field belongs too. Field groups are used to access   a group of fields without explicit prior knowledge about the number and/or names of the fields.</li> </ul> </li> <li><code>FieldAllocProp</code>: stores information about the allocation. While the field is not yet allocated, users can   request special allocations for the field, for instance to accommodate packing (for SIMD), which may   require padding. Upon allocation, this information is then used by the Field structure to extract the   actual data, wrapped in a properly shaped <code>Kokkos::View</code>. The alloc props are also responsible of tracking   additional information in case the field is a \"slice\" of a higher-dimensional one, a fact that can affect   how the data is accessed.</li> <li>Extra data: stored as a <code>std::map&lt;std::string,ekat::any&gt;</code>, allows to catch any metadata that does not fit   in the above structures. This is a last resort structure, intended to accommodate the most peculiar   corner cases, and should be used sparingly.</li> </ul>"},{"location":"dev/grid/","title":"Grids and Remappers","text":""},{"location":"dev/grid/#grids-and-remappers","title":"Grids and Remappers","text":"<p>In EAMxx, the <code>AbstractGrid</code> is an interface used to access information regarding the horizontal and vertical discretization. The most important information that the grid stores is:</p> <ul> <li>the number of local/global DOFs: these are the degrees of freedom of the horizontal grid only. Here,   local/global refers to the MPI partitioning.</li> <li>the DOFs global IDs (GIDs): a list of GIDs of the DOFs on the current MPI rank, stored as a Field</li> <li>the local IDs (LIDs) to index list: this list maps the LID of a DOF (that is, the position of the DOF   in the GID list) to a \"native\" indexing system for that DOF. For instance, a <code>PointGrid</code> (a class derived from   <code>AbstractGrid</code>) is a simple collection of points, so the \"native\" indexing system coincides with the LIDs.   However, for a <code>SEGrid</code> (a derived class, for spectral element grids), the \"native\" indexing is a triplet   <code>(ielem,igp,jgp)</code>, specifying the element index, and the two indices of the Gauss point within the element.</li> <li>geometry data: stored as a <code>std::map&lt;std::string,Field&gt;</code>, this represent any data that is intrinsically   linked to the grid (either along the horizontal or vertical direction), such as lat/lon coordinates,   vertical coordinates, area associated with the DOF.</li> </ul> <p>Grids can also be used to retrieve the layout of a 2d/3d scalar/vector field, which allows certain downstream classes to perform certain operations without assuming anything on the horizontal grid.</p> <p>In general, grid objects are passed around the different parts of EAMxx as const objects (read-only). The internal data can only be modified during construction, which usually is handled by a <code>GridsManager</code> object.</p>"},{"location":"dev/io/","title":"Input-Output","text":"<p>In EAMxx, I/O is handled through the SCORPIO library, currently a submodule of E3SM. The <code>scream_io</code> library within eamxx allows to interface the EAMxx infrastructure classes with the SCORPIO library.</p>"},{"location":"dev/kokkos_ekat/","title":"Building Blocks","text":"<p>Here we can discuss EKAT, Kokkos, and all of the highly-technical non-scientific stuff that makes our heads hurt.</p>"},{"location":"dev/kokkos_ekat/#kokkos-views","title":"Kokkos Views","text":""},{"location":"dev/kokkos_ekat/#vectorization-packs","title":"Vectorization: Packs","text":""},{"location":"dev/kokkos_ekat/#fields-and-the-field-manager","title":"Fields and the Field Manager","text":""},{"location":"dev/kokkos_ekat/#preconditions-postconditions-and-invariants","title":"Preconditions, Postconditions, and Invariants","text":""},{"location":"dev/managers/","title":"Managers","text":""},{"location":"dev/managers/#fieldmanager-and-gridsmanager","title":"FieldManager and GridsManager","text":""},{"location":"dev/processes/","title":"Atmospheric Processes","text":"<p>In EAMxx, the <code>AtmosphereProcess</code> (AP) is a class representing a portion of the atmosphere timestep algorithm. In simple terms, an AP is an object that given certain input fields performs some calculations to compute some output fields.</p> <p>TODO: describe init sequcene (e.g., the process of requesting fields), base class main       interfaces/capabilities (e.g., subcycling), class expectations (e.g., must update fields on physics grid)</p> <p>Here is a list of currently implemented atmosphere processes. TODO: add links to papers/github-repos, and a SMALL description * p3: Microphysics, blah blah * SHOC: Macrophysics/Turbulence, blah * rrtmgp: Radiation, blah * spa: prescribed aerosols, blah blah * surface coupling: blah * mam: prognostic aerosols, blah blah</p>"},{"location":"dev/standalone_testing/","title":"Standalone EAMxx Testing","text":"<p>Here we describe our testing methodology. Describe:</p> <ul> <li>Unit tests (Catch2)</li> <li>Property (verification) tests</li> <li>F90-CXX bfb tests (for code porting)</li> <li>test-all-scream</li> </ul>"},{"location":"dev/style_guide/","title":"SCREAM C++ Style Guide","text":"<p>Here's our style guide. Let the holy wars begin!</p>"},{"location":"dev/style_guide/#types","title":"Types","text":""},{"location":"dev/style_guide/#functions-and-methods","title":"Functions and Methods","text":""},{"location":"dev/style_guide/#variables","title":"Variables","text":""},{"location":"user/","title":"SCREAM User Guide","text":"<p>For the time being, see our public confluence EAMxx user guide</p>"},{"location":"user/model_input/","title":"Model input","text":"<p>TODO: explain how defaults XML, atmchange/atmquery, buildml, and input.yaml work.</p> <p>Here is a list of the currently configurable runtime parameters for EAMxx.</p>"},{"location":"user/model_output/","title":"Model output","text":"<p>EAMxx allows to configure the desired model output via YAML files, with each YAML file associated to a different output file.</p>"},{"location":"user/model_output/#basic-output-yaml-file-syntax","title":"Basic output YAML file syntax","text":"<p>The following is an example of a simple output request.</p> <p><pre><code>%YAML 1.1\n---\nfilename_prefix: my_output\nAveraging Type: Average\nMax Snapshots Per File: 10\nFields:\n  Physics:\n    Field Names:\n      - T_mid\n      - qv\n  Dynamics:\n    Field Names:\n      - dp3d_dyn\n      - omega_dyn\noutput_control:\n  Frequency: 6\n  frequency_units: nhours\n...\n</code></pre> Notice that lists can be equivalently specified in YAML as <code>Field Names: [f1, f2, f3]</code>. The user can specify fields to be outputed from any of the grids used in the simulation. In the exampole above, we requested fields from both the Physics and Dynamics grid. The other parameters are - <code>Averaging Type</code>: how the fields are integrated in time before being saved. Valid   options are   - Instant: no integration, each time frame saved corresponds to instantaneous values     of the fields   - Average/Max/Min: the fields undergo the corresponding operation over the time     interval specified in the <code>output_control</code> section. In the case above, each snapshot     saved to file corresponds to an average of the output fields over 6h windows. - <code>filename_prefix</code>: the prefix of the output file, which will be created in the run   directory. The full filename will be <code>$prefix.$avgtype.$frequnits_x$freq.$timestamp.nc</code>,   where $timestamp corresponds to the first snapshot saved in the file for Instant output,   or the beginning of the first averaging window for the other averaging types - <code>Max Snapshots Per File</code>: specifies how many time snapshots can be put in a file. Once   this number is reached, EAMxx will close the file and open a new one. - <code>Frequency</code>: how many units of time are between two consecutive writes to file. For   Instant output the fields are \"sampled\" at this frequency, while for other averaging   types the fields are \"integrated\" in time over this window - <code>frequency_units</code>: units of the output frequency. Valid options are <code>nsteps</code> (the   number of atmosphere time steps), <code>nsecs</code>, <code>nmins</code>, <code>nhours</code>, <code>ndays</code>, <code>nmonths</code>,   <code>nyears</code>.</p>"},{"location":"user/model_output/#diagnostic-output","title":"Diagnostic output","text":"<p>In addition to the fields computed by EAMxx as part of the timestep, the user can request to output derived quantities, which will be computed on the fly by the I/O interface of EAMxx. There are two types of diagnostic outputs: - quantities computed as a function of EAMxx fields. These are simply physical quantities   that EAMxx does not keep in persistent storage. As of August 2023, the available   derived quantities are (case sensitive):   - PotentialTemperature   - AtmosphereDensity   - Exner   - VirtualTemperature   - z_int   - z_mid   - geopotential_int   - geopotential_mid   - dz   - DryStaticEnergy   - SeaLevelPressure   - LiqWaterPath   - IceWaterPath   - VapWaterPath   - RainWaterPath   - RimeWaterPath   - ShortwaveCloudForcing   - LongwaveCloudForcing   - RelativeHumidity   - ZonalVapFlux   - MeridionalVapFlux   - precip_surf_mass_flux   - surface_upward_latent_heat_flux - lower-dimensional slices of a field. These are hyperslices of an existing field or of   another diagnostic output. As of August 2023, given a field X, the available options   are:   - X_at_lev_N: subviews the field X at the N-th vertical level index. Recall that     in EAMxx N=0 corresponds to the model top.   - X_at_model_bot, X_at_model_top: special case for top and bottom of the model.   - X_at_Ymb, X_at_YPa, X_at_YhPa: interpolates the field X at a vertical position     specified by the give pressure Y. Available units are mb (millibar), Pa, and hPa.   - X_at_Ym: interpolates the field X at a vertical height of Y meters.</p>"},{"location":"user/model_output/#output-remap","title":"Output remap","text":"<p>The following options can be used to to save fields on a different grid from the one they are computed on.</p> <ul> <li><code>horiz_remap_file</code>: a path to a map file (as produced by <code>ncremap</code>) between the grid   where the fields are defined and a coarser grid. EAMxx will use this to remap fields   on the fly, allowing to reduce the size of the output file. Note: with this feature,   the user can only specify fields from a single grid.</li> <li><code>vertical_remap_file</code>: similar to the previous option, this map file is used to   refine/coarsen fields in the vertical direction.</li> <li><code>IOGrid</code>: this parameter can be specified inside one of the grids sections, and will   denote the grid (which must exist in the simulation) where the fields must be remapped   before being saved to file. This feature is really only used to save fields on the   dynamics grid without saving twice the DOFs at the interface of two spectral elements.   In fact, native output from the Dynamics grid would produce <code>6*num_elems*ngp*ngp</code>,   where <code>ngp</code> is the number of Gauss points along each axis in the 2d spectral element.   Note: this feature cannot be used along with the horizontal/vertical remapper.</li> </ul>"},{"location":"user/model_output/#add-output-stream-to-a-cime-case","title":"Add output stream to a CIME case","text":"<p>In order to tell EAMxx that a new output stream is needed, one must add the name of the yaml file to be used to the list of yaml files that EAMxx will process. From the case folder, after <code>case.setup</code> has run, one can do <pre><code>$ ./atmchange output_yaml_files=/path/to/my/yaml/file\n</code></pre> to specify a single yaml file, or <pre><code>$ ./atmchange output_yaml_files+=/path/to/my/yaml/file\n</code></pre> to append to the list of yaml files. Important notes: - The user should not specify a path to a file in <code>$RUNDIR/data</code>. EAMxx will put a copy of the specified yaml files in that directory, pruning any existing copy of that file. This happens every time that <code>buildnml</code> runs; in particular, it happens during <code>case.submit</code>. - As a consequence of the above, the user should not modify the generated yaml files   that are in <code>$RUNDIR/data</code>, since any modification will be lost on the next run   of <code>buildnml</code>. To modify output parmeters, the user should modify the yaml file   that was specified with the <code>atmchange</code> command. - EAMxx will parse the yaml file and expand any string of the form $VAR, by looking   for the value of the variable VAR in the CIME case. If VAR is not a valid CIME   variable, an error will be raised.</p>"}]}