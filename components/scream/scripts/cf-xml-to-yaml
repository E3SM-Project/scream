#! /usr/bin/env python

"""
Given an XML file containing the CF conventions for standardized field names
(https://cfconventions.org/standard-names.html), this tool generates a YAML
file with the same information.

Usage: cf-xml-to-yaml <cf-xml-file>
"""

import sys, os
from math import *

class Entry:
    def __init__(self, id=None, units="", description=""):
        self.id = id
        self.units = units
        self.description = description
        self.aliases = []
    def __repr__(self):
        return "Entry(id = '%s', units='%s', description='%s')"% \
                (self.id, self.units, self.description, self.aliases)

###############################################################################
def parse_cf_xml(xml_file):
###############################################################################
    import xml.etree.ElementTree as ET
    tree = ET.parse(xml_file)
    root = tree.getroot()
    entries = {}
    for child in root:
        if child.tag == 'entry':
            id = child.attrib['id']
            units = ""
            descr = ""
            for elem in child:
                if elem.tag == 'units':
                    units = elem.text or ""
                elif elem.tag == 'description':
                    descr = elem.text or ""
            entries[id] = Entry(id, units, descr)
        elif child.tag == 'alias':
            id = child.attrib['id']
            entry_id = None
            for elem in child:
                if elem.tag == 'entry_id':
                    entry_id = elem.text
            entries[entry_id].aliases.append(id)
    return entries.values()

###############################################################################
def write_cf_yaml(entries, yaml_file):
###############################################################################
    with open(yaml_file, 'w') as f:
        f.write('# %s - generated by cf-xml-to-yaml. DO NOT EDIT!\n\n'%yaml_file)
        for e in entries:
            f.write('%s:\n'%e.id)
            f.write("  description: '%s'\n"%e.description.replace("'", "''"))
            if e.units != '':
                f.write('  units: %s\n'%e.units)
            else:
                f.write('  units:\n')
            f.write('  aliases:')
            for alias in e.aliases:
                f.write(' %s'%alias)
            f.write('\n\n')

###############################################################################
def main(description):
###############################################################################
    if len(sys.argv) < 2:
        print(description)
        exit(1)

    xml_file = sys.argv[1]
    yaml_file = xml_file.replace('.xml', '.yaml')
    entries = parse_cf_xml(xml_file)
    write_cf_yaml(entries, yaml_file)

###############################################################################

if (__name__ == "__main__"):
    main(__doc__)
